name: Django CI
env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: reverseip
  EKS_CLUSTER: reverseip-eks-cluster
on:
  push:
    branches: [ "helm" ]
  pull_request:
    branches: [ "helm" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test
      env:
          MONGODB_ENGINE: ${{ secrets.MONGODB_ENGINE }}
          MONGODB_NAME: ${{ secrets.MONGODB_NAME }}
          MONGODB_ENFORCE_SCHEMA: ${{ secrets.MONGODB_ENFORCE_SCHEMA }}
          MONGODB_HOST: ${{ secrets.MONGODB_HOST }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: True

    # Setup sonar-scanner
    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v7
    # Run sonar-scanner
    - name: SonarQube Scan
      run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
           -Dsonar.sources=$GITHUB_WORKSPACE

  Publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v3

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
         access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
         secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         registry: ${{ secrets.REGISTRY }}
         repo: reverseip
         region: ${{ env.AWS_REGION }}
         tags: dev-latest,${{ github.run_number }}
         daemon_off: false
         dockerfile: ./Dockerfile
         context: ./

  DeployToEKS:
    needs: Publish
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4
    
    - name: Set up sops
      run: |
        sudo apt-get update
        sudo apt-get install -y sops
    
    - name: Decrypt values.yaml
      run: |
        sops --decrypt --pgp $(echo "${{ secrets.PGP_PRIVATE_KEY }}" | base64 -d) values.enc.yaml > values.yaml
      env:
        SOPS_PGP_FP: ${{ secrets.PGP_FINGERPRINT }}
    
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
                
    - name: Get Kube config file
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
      
    - name: Print config file
      run: cat ~/.kube/config
            
    - name: Login to ECR
      run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password) --dry-run=client -o yaml | kubectl apply -f -
      
    - name: Deploy Helm
      uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        cluster-name: ${{ env.EKS_CLUSTER }}
        # config-files: .github/values/dev.yaml
        chart-path: helm/reverseip-chart
        namespace: default
        values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=dev-latest,buildnumber=${{ github.run_number }}
        name: reverseip-dev-release        